"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, <Daniel Pang> and <FULL NAME>, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: Dmp3577
UT EID 2:
"""
import sys

class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """_summary_
    """
    def __init__(self):
        self.head = None

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """
        Insert the term with the coefficient coeff and exponent exp into the polynomial.
        If the coefficient is 0, do nothing.
        If a term with that exponent already exists, add the coefficients together,
        potentially removing the term if the summed coefficient is 0.
        Terms must be kept in descending order by exponent.
        """
        if coeff == 0:
            return
        new_node = Node(coeff, exp)
        if self.head is None or self.head.exp < exp:
            new_node.next = self.head
            self.head = new_node
            return
        prev = None
        cur = self.head
        while cur is not None and cur.exp > exp:
            prev = cur
            cur = cur.next
        if cur is not None and cur.exp == exp:
            cur.coeff += coeff
            if cur.coeff == 0:
                if prev is None:
                    self.head = cur.next
                else:
                    prev.next = cur.next
            return
        new_node.next = cur
        if prev is None:
            self.head = new_node
        else:
            prev.next = new_node

    # Add a polynomial p to the polynomial and return the resulting polynomial as a new linked list.
    def add(self, p):
        """
        Add a polynomial p to the current polynomial and
        return the resulting polynomial as a new linked list.
        """
        result = LinkedList()
        cur1 = self.head
        cur2 = p.head
        while cur1 is not None or cur2 is not None:
            if cur1 is None:
                result.insert_term(cur2.coeff, cur2.exp)
                cur2 = cur2.next
            elif cur2 is None:
                result.insert_term(cur1.coeff, cur1.exp)
                cur1 = cur1.next
            elif cur1.exp > cur2.exp:
                result.insert_term(cur1.coeff, cur1.exp)
                cur1 = cur1.next
            elif cur1.exp < cur2.exp:
                result.insert_term(cur2.coeff, cur2.exp)
                cur2 = cur2.next
            else:
                combined_coeff = cur1.coeff + cur2.coeff
                if combined_coeff != 0:
                    result.insert_term(combined_coeff, cur1.exp)
                cur1 = cur1.next
                cur2 = cur2.next
        return result

    # Multiply a polynomial p with the polynomial and return the product as a new linked list.
    def mult(self, p):
        """
        Multiply a polynomial p with the current polynomial and
        return the product as a new linked list.
        """
        result = LinkedList()
        cur1 = self.head
        while cur1 is not None:
            cur2 = p.head
            while cur2 is not None:
                product_coeff = cur1.coeff * cur2.coeff
                product_exp = cur1.exp + cur2.exp
                result.insert_term(product_coeff, product_exp)
                cur2 = cur2.next
            cur1 = cur1.next
        return result

    # Return a string representation of the polynomial.
    def __str__(self):
        """
        Return a string representation of the polynomial.
        """
        if self.head is None:
            return ""
        terms = []
        cur = self.head
        while cur is not None:
            terms.append(f"({cur.coeff}, {cur.exp})")
            cur = cur.next
        return " + ".join(terms)

def main():
    """
    Read data from stdin (terminal/file) using input() and create polynomial p and q.
    Get the sum and product of p and q, and print the results.
    """
    # read data from stdin (terminal/file) using input() and create polynomial p
    data = sys.stdin.read().strip().split("\n")
    p = LinkedList()
    p_terms = data[0].split()
    for term in p_terms:
        coeff, exp = map(int, term.split(","))
        p.insert_term(coeff, exp)
    # read data from stdin (terminal/file) using input() and create polynomial q
    q = LinkedList()
    q_terms = data[1].split()
    for term in q_terms:
        coeff, exp = map(int, term.split(","))
        q.insert_term(coeff, exp)
    # get sum of p and q as a new linked list and print sum
    sum_poly = p.add(q)
    print("Sum:", sum_poly)
    # get product of p and q as a new linked list and print product
    product_poly = p.mult(q)
    print("Product:", product_poly)

if __name__ == "__main__":
    main()
